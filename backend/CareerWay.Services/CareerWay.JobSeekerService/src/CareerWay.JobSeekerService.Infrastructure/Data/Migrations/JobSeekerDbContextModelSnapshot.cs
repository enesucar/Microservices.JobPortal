// <auto-generated />
using System;
using CareerWay.JobSeekerService.Infrastructure.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CareerWay.JobSeekerService.Infrastructure.Data.Migrations
{
    [DbContext(typeof(JobSeekerDbContext))]
    partial class JobSeekerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Cities", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("AboutMe")
                        .HasMaxLength(1048)
                        .HasColumnType("character varying(1048)");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DriverLicenseType")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int?>("GenderType")
                        .HasColumnType("integer");

                    b.Property<string>("Github")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Instragram")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Interests")
                        .HasMaxLength(1048)
                        .HasColumnType("character varying(1048)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsSmoking")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Linkedin")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("MilitaryStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("ProfilePhoto")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ResumeVideo")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Twitter")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("JobSeekers", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerCertificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<short>("ObtainedMonth")
                        .HasColumnType("smallint");

                    b.Property<short>("ObtainedYear")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("JobSeekerCertificates", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageType")
                        .HasColumnType("integer");

                    b.Property<int>("ReadingLevelType")
                        .HasColumnType("integer");

                    b.Property<int>("SpeakingLevelType")
                        .HasColumnType("integer");

                    b.Property<int>("WritingLevelType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("JobSeekerLanguages", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Link")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<short>("ProjectMonth")
                        .HasColumnType("smallint");

                    b.Property<short>("ProjectYear")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("JobSeekerProjects", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.HasIndex("PositionId");

                    b.ToTable("JobSeekerReferences", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerSchool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("EducationLevelType")
                        .HasColumnType("integer");

                    b.Property<short>("EndYear")
                        .HasColumnType("smallint");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<short>("StartYear")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("JobSeekerSchools", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<long>("SkillId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSeekerSkills", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerWorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<short>("EndMonth")
                        .HasColumnType("smallint");

                    b.Property<short>("EndYear")
                        .HasColumnType("smallint");

                    b.Property<long>("JobSeekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<short>("StartMonth")
                        .HasColumnType("smallint");

                    b.Property<short>("StartYear")
                        .HasColumnType("smallint");

                    b.Property<bool>("StillWorking")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("JobSeekerId");

                    b.HasIndex("PositionId");

                    b.ToTable("JobSeekerWorkExperiences", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.Position", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Positions", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.Skill", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Skills", "JobSeeker");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", b =>
                {
                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerCertificate", b =>
                {
                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", null)
                        .WithMany("JobSeekerCertificates")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerLanguage", b =>
                {
                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", null)
                        .WithMany("JobSeekerLanguages")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerProject", b =>
                {
                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", null)
                        .WithMany("JobSeekerProjects")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerReference", b =>
                {
                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", null)
                        .WithMany("JobSeekerReferences")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerSchool", b =>
                {
                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", null)
                        .WithMany("JobSeekerSchools")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerSkill", b =>
                {
                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", "JobSeeker")
                        .WithMany("JobSeekerSkills")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobSeeker");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeekerWorkExperience", b =>
                {
                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", null)
                        .WithMany("WorkExperiences")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CareerWay.JobSeekerService.Domain.Entities.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("CareerWay.JobSeekerService.Domain.Entities.JobSeeker", b =>
                {
                    b.Navigation("JobSeekerCertificates");

                    b.Navigation("JobSeekerLanguages");

                    b.Navigation("JobSeekerProjects");

                    b.Navigation("JobSeekerReferences");

                    b.Navigation("JobSeekerSchools");

                    b.Navigation("JobSeekerSkills");

                    b.Navigation("WorkExperiences");
                });
#pragma warning restore 612, 618
        }
    }
}
